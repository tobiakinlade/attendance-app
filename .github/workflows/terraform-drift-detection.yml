name: Terraform Drift Detection

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to check'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

env:
  AWS_REGION: eu-west-2
  TF_VERSION: 1.5.0

jobs:
  detect-drift:
    name: Detect Infrastructure Drift
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init -input=false
      
      - name: Terraform Plan (Detect Drift)
        id: plan
        run: |
          cd terraform
          
          # Run terraform plan and capture output
          set +e
          terraform plan -detailed-exitcode -out=tfplan -no-color 2>&1 | tee plan-output.txt
          EXIT_CODE=${PIPESTATUS[0]}
          set -e
          
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Exit codes:
          # 0 = No changes (no drift)
          # 1 = Error
          # 2 = Changes present (drift detected)
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "drift_detected=false" >> $GITHUB_OUTPUT
            echo "✅ No drift detected - infrastructure matches Terraform state"
          elif [ $EXIT_CODE -eq 2 ]; then
            echo "drift_detected=true" >> $GITHUB_OUTPUT
            echo "⚠️ DRIFT DETECTED - Infrastructure has diverged from Terraform state!"
            
            # Save plan for review
            terraform show -no-color tfplan > drift-details.txt
          else
            echo "drift_detected=error" >> $GITHUB_OUTPUT
            echo "❌ Error running terraform plan"
            exit 1
          fi
      
      - name: Create Drift Summary
        if: steps.plan.outputs.drift_detected == 'true'
        run: |
          cd terraform
          
          cat > drift-summary.md << 'EOF'
          # 🚨 Infrastructure Drift Detected
          
          ## Summary
          - **Environment:** ${{ github.event.inputs.environment || 'dev' }}
          - **Detected At:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Triggered By:** ${{ github.actor }}
          - **Workflow Run:** [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ## What is Drift?
          Infrastructure drift occurs when resources in AWS are modified outside of Terraform (e.g., manual changes in AWS Console, CLI, or other tools).
          
          ## Detected Changes
