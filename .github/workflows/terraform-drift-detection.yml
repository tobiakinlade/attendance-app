name: Terraform Drift Detection

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: eu-west-2

jobs:
  detect-drift:
    name: Detect Infrastructure Drift
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      issues: write

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=attendance-app/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Plan (Detect Drift)
        id: plan
        run: |
          set +e
          terraform plan -input=false -detailed-exitcode -no-color \
            -var="environment=dev" \
            -var="project_name=attendance-app" \
            -var="domain_name=tech-with-tobi.com" \
            -var="route53_zone_name=tech-with-tobi.com" \
            -var="create_route53_record=true" \
            -var="desired_count=2" \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -out=tfplan 2>&1 | tee plan_output.txt
          EXIT_CODE=${PIPESTATUS[0]}

          echo ""
          echo "üìä Terraform plan completed"
          echo "   Exit code: $EXIT_CODE"
          echo "   0 = No changes (no drift)"
          echo "   1 = Error occured"
          echo "   2 = Changes detected (DRIFT!)"

          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
          exit 0

      - name: Check for Drift
        id: drift
        run: |
          if [ "${{ steps.plan.outputs.exit_code }}" == "2" ]; then
            echo "drift_detected=true" >> $GITHUB_OUTPUT
            echo "üö® Drift detected!"
          else
            echo "drift_detected=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No drift detected"
          fi

      - name: Create or Update GitHub Issue
        if: steps.drift.outputs.drift_detected == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TODAY=$(date -u '+%Y-%m-%d')
          
          # Create labels if missing
          gh label create infrastructure --color 0e8a16 --force 2>/dev/null || true
          gh label create drift-detection --color d73a4a --force 2>/dev/null || true
          gh label create needs-review --color fbca04 --force 2>/dev/null || true
          
          # Check for existing issue
          EXISTING=$(gh issue list \
            --state open \
            --label drift-detection \
            --json number,title \
            --jq ".[] | select(.title | contains(\"$TODAY\")) | .number" | head -1)
          
          if [ -n "$EXISTING" ]; then
            echo "üìù Updating issue #$EXISTING"
            cat > comment.txt << EOF
          ### üîÑ Drift Still Present
          
          **Check Time:** $(date -u)
          
          [View Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF
            gh issue comment $EXISTING --body-file comment.txt
            rm comment.txt
          else
            echo "üìù Creating new issue"
            cat > body.txt << EOF
          ## üö® Infrastructure Drift Detected
          
          **Detected:** $(date -u)
          **Environment:** dev
          **Region:** ${{ env.AWS_REGION }}
          
          ### Summary
          Infrastructure has diverged from Terraform state.
          
          ### Changes Detected
          See workflow run for full Terraform plan output.
          
          ### Next Steps
          1. Review changes in workflow run
          2. Update Terraform code or revert manual changes
          3. Run terraform apply to sync
          4. Close this issue
          
          [üìä View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF
            
            gh issue create \
              --title "üö® Infrastructure Drift - $TODAY" \
              --label infrastructure,drift-detection,needs-review \
              --body-file body.txt
            
            rm body.txt
          fi

      - name: Send Drift Email Notification
        if: steps.drift.outputs.drift_detected == 'true'
        run: |
          RECIPIENTS="${{ secrets.EMAIL_RECIPIENTS }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          for EMAIL in $(echo "$RECIPIENTS" | tr ',' ' '); do
            EMAIL=$(echo "$EMAIL" | xargs)
            echo "üìß Sending to: $EMAIL"
            
            # Create email HTML
            cat > email.html << 'HTMLEOF'
          <!DOCTYPE html>
          <html>
          <body style="font-family: Arial; max-width: 600px; margin: 0 auto;">
            <div style="background: #ff6b6b; color: white; padding: 20px; text-align: center; border-radius: 5px;">
              <h1>üö® Infrastructure Drift Detected</h1>
            </div>
            <div style="padding: 20px;">
              <p><strong>Time:</strong> TIME_PLACEHOLDER</p>
              <p><strong>Environment:</strong> dev</p>
              <p><strong>Region:</strong> eu-west-2</p>
              <div style="background: #fff3cd; padding: 15px; border-left: 4px solid #ffc107; margin: 15px 0;">
                <strong>‚ö†Ô∏è Action Required</strong><br>
                Infrastructure has diverged from Terraform code.
              </div>
              <p style="text-align: center;">
                <a href="URL_PLACEHOLDER" style="background: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;">View Details</a>
              </p>
            </div>
          </body>
          </html>
          HTMLEOF
            
            # Replace placeholders
            sed -i "s|TIME_PLACEHOLDER|$(date -u)|g" email.html
            sed -i "s|URL_PLACEHOLDER|$RUN_URL|g" email.html
            
            # Send using jq for proper JSON escaping
            BODY_JSON=$(jq -Rs . < email.html)
            
            aws ses send-email \
              --from "noreply@tech-with-tobi.com" \
              --destination "ToAddresses=$EMAIL" \
              --message "{\"Subject\":{\"Data\":\"üö® Infrastructure Drift - $(date -u +%H:%M) UTC\",\"Charset\":\"utf8\"},\"Body\":{\"Html\":{\"Data\":$BODY_JSON,\"Charset\":\"utf8\"}}}" \
              --region ${{ env.AWS_REGION }}
            
            sleep 1
          done
          
          rm -f email.html
          echo "‚úÖ Notifications sent"

      - name: Summary
        run: |
          if [ "${{ steps.drift.outputs.drift_detected }}" == "true" ]; then
            echo "### üö® Drift Detected!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
            echo "**Notifications:** ‚úÖ Sent" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚úÖ No Drift Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
            echo "**Next check:** $(date -u -d '+1 hour' '+%H:00 UTC')" >> $GITHUB_STEP_SUMMARY
          fi
