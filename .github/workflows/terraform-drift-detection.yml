name: Terraform Drift Detection

on:
  schedule:
    - cron: '0 * * * *'  # Every hour
  workflow_dispatch:

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: eu-west-2

jobs:
  detect-drift:
    name: Detect Infrastructure Drift
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      issues: write

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=attendance-app/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Plan (Detect Drift)
        id: plan
        run: |
          terraform plan -detailed-exitcode -no-color \
            -var="environment=dev" \
            -var="project_name=attendance-app" \
            -var="domain_name=tech-with-tobi.com" \
            -var="route53_zone_name=tech-with-tobi.com" \
            -var="create_route53_record=true" \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -out=tfplan 2>&1 | tee plan_output.txt
        continue-on-error: true

      - name: Check for Drift
        id: drift
        run: |
          if grep -q "No changes" plan_output.txt; then
            echo "drift_detected=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No drift detected"
          else
            echo "drift_detected=true" >> $GITHUB_OUTPUT
            echo "üö® Drift detected!"
          fi

      - name: Prepare Email Body
        if: steps.drift.outputs.drift_detected == 'true'
        id: email
        run: |
          HOUR=$(date -u '+%H:%M UTC')
          DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          # Get first 100 lines of plan output (escaped)
          PLAN_OUTPUT=$(cat plan_output.txt | head -100 | sed 's/</\&lt;/g' | sed 's/>/\&gt;/g')
          
          cat > email_body.html << 'EMAILEOF'
          <!DOCTYPE html>
          <html>
          <head>
            <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; }
              .header { background: #ff6b6b; color: white; padding: 20px; border-radius: 5px; text-align: center; }
              .content { background: #f9f9f9; padding: 20px; margin-top: 20px; border-radius: 5px; }
              .warning { background: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin: 15px 0; }
              .code-block { background: #282c34; color: #abb2bf; padding: 15px; border-radius: 5px; overflow-x: auto; font-size: 12px; white-space: pre-wrap; word-wrap: break-word; }
              .button { background: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 10px 5px; }
              .info { color: #666; font-size: 14px; margin-top: 20px; padding-top: 20px; border-top: 1px solid #ddd; }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>üö® Infrastructure Drift Detected</h1>
              <p style="margin: 0;">Hourly Check - REPLACE_HOUR</p>
            </div>
            
            <div class="content">
              <p><strong>‚è∞ Time:</strong> REPLACE_DATE</p>
              <p><strong>üåç Environment:</strong> dev</p>
              <p><strong>üìç Region:</strong> eu-west-2</p>
              
              <div class="warning">
                <strong>‚ö†Ô∏è Action Required</strong><br>
                Infrastructure has diverged from Terraform code.
              </div>
              
              <h3>Changes Detected:</h3>
              <div class="code-block">REPLACE_PLAN_OUTPUT</div>
              
              <h3>Next Steps:</h3>
              <ol>
                <li>Review changes above</li>
                <li>Update Terraform code or apply fix</li>
                <li>Document resolution</li>
              </ol>
              
              <div style="text-align: center; margin-top: 20px;">
                <a href="REPLACE_RUN_URL" class="button">View Details</a>
              </div>
            </div>
            
            <div class="info">
              <p>ü§ñ Automated drift detection from GitHub Actions</p>
            </div>
          </body>
          </html>
          EMAILEOF
          
          # Replace placeholders
          sed -i "s|REPLACE_HOUR|$HOUR|g" email_body.html
          sed -i "s|REPLACE_DATE|$DATE|g" email_body.html
          sed -i "s|REPLACE_RUN_URL|https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|g" email_body.html
          
          # Escape plan output and insert
          echo "$PLAN_OUTPUT" > plan_escaped.txt
          sed -i "/REPLACE_PLAN_OUTPUT/r plan_escaped.txt" email_body.html
          sed -i "s|REPLACE_PLAN_OUTPUT||g" email_body.html
          
          # Output for next step
          BODY=$(cat email_body.html | tr -d '\n')
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create or Update GitHub Issue
        if: steps.drift.outputs.drift_detected == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TODAY=$(date -u '+%Y-%m-%d')
          
          # Check if issue exists
          EXISTING_ISSUE=$(gh issue list \
            --label drift-detection \
            --state open \
            --search "Infrastructure Drift Detected - $TODAY" \
            --json number \
            --jq '.[0].number // empty')
          
          if [ -n "$EXISTING_ISSUE" ]; then
            echo "üìù Updating existing issue #$EXISTING_ISSUE"
            
            gh issue comment $EXISTING_ISSUE --body "### üîÑ Drift Still Present
            
            **Check Time:** $(date -u)
            
            [View Latest Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            
          else
            echo "üìù Creating new issue"
            
            PLAN_SNIPPET=$(cat plan_output.txt | head -50)
            
            gh issue create \
              --title "üö® Infrastructure Drift Detected - $TODAY" \
              --label "infrastructure,drift-detection,needs-review" \
              --body "## Infrastructure Drift Detected
            
            **Detected:** $(date -u)
            **Environment:** dev
            **Region:** ${{ env.AWS_REGION }}
            
            ### Changes Detected:
            \`\`\`
            $PLAN_SNIPPET
            \`\`\`
            
            ### Next Steps:
            1. Review changes
            2. Update Terraform code or apply fix
            3. Close issue once resolved
            
            [View Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          fi

      - name: Send Drift Email Notification
        if: steps.drift.outputs.drift_detected == 'true'
        run: |
          RECIPIENTS="${{ secrets.EMAIL_RECIPIENTS }}"
          BODY='${{ steps.email.outputs.body }}'
          
          for EMAIL in $(echo $RECIPIENTS | tr ',' ' '); do
            EMAIL=$(echo "$EMAIL" | xargs)
            echo "üìß Sending to: $EMAIL"
            
            aws ses send-email \
              --from "noreply@tech-with-tobi.com" \
              --destination "ToAddresses=$EMAIL" \
              --message "Subject={Data='üö® Infrastructure Drift - $(date -u +%H:%M) UTC',Charset=utf8},Body={Html={Data='$BODY',Charset=utf8}}" \
              --region ${{ env.AWS_REGION }}
            
            sleep 1
          done
          
          echo "‚úÖ Notifications sent"

      - name: Summary
        run: |
          if [ "${{ steps.drift.outputs.drift_detected }}" == "true" ]; then
            echo "### üö® Drift Detected!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
            echo "**Notifications:** ‚úÖ Sent" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚úÖ No Drift Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
            echo "**Next check:** $(date -u -d '+1 hour' '+%H:00 UTC')" >> $GITHUB_STEP_SUMMARY
          fi
