name: Build and Deploy to ECS

on:
 push:
  branches:
   - main
  paths:
   - 'app/*'
   - 'Dockerfile'
   - 'requirements.txt'
   - '.github/workflows/deploy.yml'

env:
 AWS_REGION: eu-west-2
 ECR_REPOSITORY: attendnace-app-dev
 ECS_CLUSTER: attendance-app-dev-cluster
 ECS_SERVICE: attendance-app-dev-service
 CONTAINER_NAME: attendance-app-container

jobs:
 test:
  name: Run Tests
  runs-on: ubuntu-latest

  steps:
   - name: Checkout code
     uses: actions/checkout@v4

   - name: Set up Python
     uses: actions/setup-python@v5
     with:
      python-version: '3.11'
      cache: 'pip'
   
   - name: Install dependencies
     run: |
      # Stop build if there are Python syntax errors
      flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
      # Exit-zero treats all errors as warnings
      flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

   - name: Run tests
     run: |
      # If tests exists
      # pytest tests/ --cov=app --con-report=xml
      echo "No tests defined yet - skipping"
     
 security-scan:
  name: Security Scan
  runs-on: ubuntu-latest

  steps:
   - name: Checkout code
     uses: actions/checkout@v4

   - name: Run Trivy vulnerability scanner
     uses: aquasecurity/trivy-action@master
     with:
      scan-type: 'fs'
      scan-ref: '.'
      format: 'table'
      exit-code: '0'
 
 build-and-deploy:
  name: Build and Deploy
  runs-on: ubuntu-latest
  needs: [test, security-scan]
  permissions:
   id-token: write
   contents: read
  
  steps:
   - name: Checkout code
     uses: actions/checkout@v4
   
   - name: Configure AWS credentials
     uses: aws-actions/configure-aws-credentials@v4
     with:
      role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
      aws-region: ${{ env.AWS_REGION }}
  
   - name: Login to Amazon ECR
     id: login-ecr
     uses: aws-actions/amazon-ecr-login@v2
   
   - name: Build, tag, push image to Amazon ECR
     id: build-image
     env:
      ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      IMAGE_TAG: ${{ github.sha }}
     run: |
      # Build Docker image
      docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      docker tag $ECR_RGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # Push both tags
      docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # Output image URI for deployment
      echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

   - name: Download task definition
     run: |
      aws ecs describe-task-definition \
       --task-definition ${{ env.ECS_CLUSTER }} \
       --query taskDefinition > task-definition.json
   
   - name: Update ECS task definition
     id: task-def
     uses: aws-actions/amazon-ecs-render-task-definition@v1
     with: 
      task-definition: task-definition.json
      container-name: ${{ env.CONTAINER_NAME }}
      image: ${{ steps.build-image.outputs.image }}

   - name: Deploy to Amazon ECS
     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
     with:
      task-definition: ${{ steps.task-def.outputs.task-definition }}
      service: ${{ env.ECS_SERVICE }}
      cluster: ${{ env.ECS_CLUSTER }}
      wait-for-service-stability: true

   - name: Deployment Summary
     run: |
      echo "### Deployment Successful!" >> $GITHUB_STEP_SUMMARY
      echo "" >> $GITHUB_STEP_SUMMARY
      echo "**Image:** ${{ steps.build-image.outputs.image }}" >> $GITHUB_STEP_SUMMARY
      echo "**Cluster:** ${{ env.ECS_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
      echo "**Service:** ${{ env.ECS_SERVICE }}" >> $GITHUB_STEP_SUMMARY
      echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY



   