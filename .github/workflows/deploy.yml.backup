name: Deploy to Dev

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'Dockerfile'
      - 'requirements.txt'
  
  workflow_dispatch:

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: attendance-app-dev
  ECS_CLUSTER: attendance-app-dev-cluster
  ECS_SERVICE: attendance-app-dev-service
  CONTAINER_NAME: attendance-app-container

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install and Test
        run: |
          pip install -r requirements.txt
          pip install flake8 pytest
          flake8 app --count --select=E9,F63,F7,F82 --show-source
          echo "‚úÖ Tests passed"

  deploy:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: test
    permissions:
      id-token: write
      contents: read
    outputs:
      image: ${{ steps.build.outputs.image }}
      status: ${{ job.status }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push
        id: build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Update ECS
        run: |
          aws ecs describe-task-definition --task-definition attendance-app-dev --query taskDefinition > task-def.json
          
      - name: Render Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build.outputs.image }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Summary
        run: |
          echo "### ‚úÖ Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ steps.build.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "**By:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # Send Email Notification
  # ============================================
  notify:
    name: Send Email Notification
    needs: deploy
    if: always()  # Run even if deployment fails
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Send Deployment Notification
        run: |
          STATUS="${{ needs.deploy.result }}"
          
          # Set email content based on deployment status
          if [ "$STATUS" == "success" ]; then
            EMOJI="‚úÖ"
            SUBJECT="Deployment Successful - Dev Environment"
            TITLE="Deployment Successful"
            COLOR="#4CAF50"
            MESSAGE="Your code has been successfully deployed to the development environment."
          else
            EMOJI="‚ùå"
            SUBJECT="Deployment Failed - Dev Environment"
            TITLE="Deployment Failed"
            COLOR="#f44336"
            MESSAGE="The deployment failed. Please check the logs and try again."
          fi
          
          # Create HTML email
          cat > email.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <body style="font-family: Arial, sans-serif; margin: 0; padding: 0; background-color: #f4f4f4;">
            <div style="max-width: 600px; margin: 40px auto; background: white; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); overflow: hidden;">
              
              <!-- Header -->
              <div style="background: COLOR_PLACEHOLDER; color: white; padding: 40px 20px; text-align: center;">
                <h1 style="margin: 0; font-size: 28px;">EMOJI_PLACEHOLDER TITLE_PLACEHOLDER</h1>
                <p style="margin: 15px 0 0 0; font-size: 16px; opacity: 0.95;">Dev Environment</p>
              </div>
              
              <!-- Content -->
              <div style="padding: 40px 30px;">
                <p style="font-size: 16px; color: #333; line-height: 1.6; margin-top: 0;">
                  MESSAGE_PLACEHOLDER
                </p>
                
                <!-- Deployment Details -->
                <div style="background: #f8f9fa; padding: 20px; border-radius: 6px; margin: 25px 0; border-left: 4px solid COLOR_PLACEHOLDER;">
                  <h3 style="margin: 0 0 15px 0; color: #333; font-size: 16px;">üìã Deployment Details</h3>
                  <table style="width: 100%; border-collapse: collapse;">
                    <tr>
                      <td style="padding: 8px 0; color: #666; font-size: 14px;"><strong>Deployed by:</strong></td>
                      <td style="padding: 8px 0; color: #333; font-size: 14px;">ACTOR_PLACEHOLDER</td>
                    </tr>
                    <tr>
                      <td style="padding: 8px 0; color: #666; font-size: 14px;"><strong>Time:</strong></td>
                      <td style="padding: 8px 0; color: #333; font-size: 14px;">TIME_PLACEHOLDER</td>
                    </tr>
                    <tr>
                      <td style="padding: 8px 0; color: #666; font-size: 14px;"><strong>Commit:</strong></td>
                      <td style="padding: 8px 0; color: #333; font-size: 14px; font-family: monospace;">COMMIT_PLACEHOLDER</td>
                    </tr>
                    <tr>
                      <td style="padding: 8px 0; color: #666; font-size: 14px;"><strong>Branch:</strong></td>
                      <td style="padding: 8px 0; color: #333; font-size: 14px;">BRANCH_PLACEHOLDER</td>
                    </tr>
                    <tr>
                      <td style="padding: 8px 0; color: #666; font-size: 14px;"><strong>Image:</strong></td>
                      <td style="padding: 8px 0; color: #333; font-size: 14px; word-break: break-all;">IMAGE_PLACEHOLDER</td>
                    </tr>
                  </table>
                </div>
                
                <!-- Action Buttons -->
                <div style="text-align: center; margin: 35px 0 20px 0;">
                  <a href="https://app.tech-with-tobi.com" 
                     style="display: inline-block; background: #2196F3; color: white; padding: 14px 28px; text-decoration: none; border-radius: 6px; margin: 0 5px; font-weight: 500; font-size: 15px;">
                    üåê View App
                  </a>
                  <a href="https://github.com/REPO_PLACEHOLDER/actions/runs/RUN_ID_PLACEHOLDER" 
                     style="display: inline-block; background: #607D8B; color: white; padding: 14px 28px; text-decoration: none; border-radius: 6px; margin: 0 5px; font-weight: 500; font-size: 15px;">
                    üìä View Logs
                  </a>
                </div>
              </div>
              
              <!-- Footer -->
              <div style="background: #f8f9fa; padding: 20px 30px; text-align: center; border-top: 1px solid #dee2e6;">
                <p style="margin: 0; font-size: 13px; color: #6c757d;">
                  ü§ñ Automated deployment notification from GitHub Actions
                </p>
                <p style="margin: 8px 0 0 0; font-size: 12px; color: #adb5bd;">
                  Attendance App CI/CD Pipeline
                </p>
              </div>
              
            </div>
          </body>
          </html>
          EOF
          
          # Replace placeholders with actual values
          sed -i "s|COLOR_PLACEHOLDER|${COLOR}|g" email.html
          sed -i "s|EMOJI_PLACEHOLDER|${EMOJI}|g" email.html
          sed -i "s|TITLE_PLACEHOLDER|${TITLE}|g" email.html
          sed -i "s|MESSAGE_PLACEHOLDER|${MESSAGE}|g" email.html
          sed -i "s|ACTOR_PLACEHOLDER|${{ github.actor }}|g" email.html
          sed -i "s|TIME_PLACEHOLDER|$(date -u '+%Y-%m-%d %H:%M:%S UTC')|g" email.html
          sed -i "s|COMMIT_PLACEHOLDER|${{ github.sha }}|g" email.html
          sed -i "s|BRANCH_PLACEHOLDER|${{ github.ref_name }}|g" email.html
          sed -i "s|IMAGE_PLACEHOLDER|${{ needs.deploy.outputs.image }}|g" email.html
          sed -i "s|REPO_PLACEHOLDER|${{ github.repository }}|g" email.html
          sed -i "s|RUN_ID_PLACEHOLDER|${{ github.run_id }}|g" email.html
          
          # Convert HTML to JSON-safe string
          BODY_JSON=$(jq -Rs . < email.html)
          
          # Send email via AWS SES
          aws ses send-email \
            --from "tobi.akinlade.co@gmail.com" \
            --destination "ToAddresses=${{ secrets.EMAIL_RECIPIENTS }}" \
            --message "{
              \"Subject\": {
                \"Data\": \"${SUBJECT}\",
                \"Charset\": \"UTF-8\"
              },
              \"Body\": {
                \"Html\": {
                  \"Data\": ${BODY_JSON},
                  \"Charset\": \"UTF-8\"
                }
              }
            }" \
            --region ${{ env.AWS_REGION }}
          
          # Clean up
          rm -f email.html
          
          if [ "$STATUS" == "success" ]; then
            echo "‚úÖ Success notification sent to team"
          else
            echo "‚ùå Failure notification sent to team"
          fi

      - name: Notification Summary
        run: |
          STATUS="${{ needs.deploy.result }}"
          
          if [ "$STATUS" == "success" ]; then
            echo "### ‚úÖ Deployment & Notification Complete!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üìß Success email sent to: \`${{ secrets.EMAIL_RECIPIENTS }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ö†Ô∏è Deployment Failed - Team Notified" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üìß Failure email sent to: \`${{ secrets.EMAIL_RECIPIENTS }}\`" >> $GITHUB_STEP_SUMMARY
          fi
