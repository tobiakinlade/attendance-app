name: Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy (e.g., v1.0.0)'
        required: true
        type: string

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: attendance-app-prod
  ECS_CLUSTER: attendance-app-prod-cluster
  ECS_SERVICE: attendance-app-prod-service
  CONTAINER_NAME: attendance-app-container

jobs:
  # ============================================
  # JOB 1: Build and Push Image
  # ============================================
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      image: ${{ steps.build-image.outputs.image }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}

      - name: Get Version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          VERSION=$(echo "$VERSION" | sed 's|refs/tags/||')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.version.outputs.version }}
        run: |
          echo "🔨 Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "📤 Pushing to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "✅ Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  # ============================================
  # JOB 2: Deploy to Production
  # ============================================
  deploy-production:
    name: Deploy to Production ECS
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition attendance-app-prod \
            --query taskDefinition > task-definition.json

      - name: Update task definition
        id: task-def
        run: |
          NEW_IMAGE="${{ needs.build-and-push.outputs.image }}"
          
          # Update the image in task definition
          jq --arg IMAGE "$NEW_IMAGE" '.containerDefinitions[0].image = $IMAGE' task-definition.json > updated-task-def.json
          
          # Register new task definition
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT
          echo "✅ New task definition registered: $TASK_DEF_ARN"

      - name: Deploy to ECS
        run: |
          echo "🚀 Deploying to production..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.task-def.outputs.task_def_arn }} \
            --force-new-deployment

      - name: Wait for service stability
        run: |
          echo "⏳ Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}
          
          echo "✅ Service is stable"

      - name: Verify deployment
        run: |
          SERVICE_INFO=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].[status,runningCount,desiredCount]' \
            --output text)
          
          echo "Service status: $SERVICE_INFO"
          echo "✅ Deployment verified"

      - name: Summary
        run: |
          echo "### 🚀 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.build-and-push.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ needs.build-and-push.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster:** ${{ env.ECS_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${{ env.ECS_SERVICE }}" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # JOB 3: Send Deployment Notification
  # ============================================
  send-deployment-notification:
    needs: deploy-production
    if: always()
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-2

      - name: Send Notification
        run: |
          STATUS="${{ needs.deploy-production.result }}"
          VERSION="${{ github.ref_name }}"
          
          # Clean version (remove refs/tags/ if present)
          VERSION=$(echo "$VERSION" | sed 's|refs/tags/||')
          
          # Set variables based on status
          if [ "$STATUS" == "success" ]; then
            EMOJI="✅"
            SUBJECT="Production Deployed - v${VERSION}"
            TITLE="Deployment Successful"
            COLOR="#4CAF50"
            MESSAGE="The deployment completed successfully and is now live."
          else
            EMOJI="❌"
            SUBJECT="URGENT: Deployment Failed - v${VERSION}"
            TITLE="Deployment Failed"
            COLOR="#f44336"
            MESSAGE="The deployment failed. Check logs immediately."
          fi
          
          # Create simple HTML email
          cat > email.html << EOF
          <!DOCTYPE html>
          <html>
          <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #f4f4f4; padding: 20px;">
            <div style="background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
              <!-- Header -->
              <div style="background: ${COLOR}; color: white; padding: 30px 20px; text-align: center;">
                <h1 style="margin: 0; font-size: 24px;">${EMOJI} ${TITLE}</h1>
                <p style="margin: 10px 0 0 0; opacity: 0.9;">Version ${VERSION}</p>
              </div>
              
              <!-- Content -->
              <div style="padding: 30px 20px;">
                <p style="font-size: 16px; color: #333; line-height: 1.6;">${MESSAGE}</p>
                
                <div style="background: #f9f9f9; padding: 15px; border-radius: 5px; margin: 20px 0;">
                  <p style="margin: 5px 0;"><strong>Deployed by:</strong> ${{ github.actor }}</p>
                  <p style="margin: 5px 0;"><strong>Time:</strong> $(date -u '+%Y-%m-%d %H:%M:%S UTC')</p>
                  <p style="margin: 5px 0;"><strong>Environment:</strong> Production</p>
                  <p style="margin: 5px 0;"><strong>Region:</strong> eu-west-2</p>
                </div>
                
                <!-- Quick Links -->
                <div style="text-align: center; margin: 30px 0;">
                  <a href="https://app.tech-with-tobi.com" style="background: #2196F3; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 5px; font-weight: 500;">View App</a>
                  <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" style="background: #607D8B; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 5px; font-weight: 500;">View Logs</a>
                </div>
              </div>
              
              <!-- Footer -->
              <div style="background: #f8f9fa; padding: 15px 20px; text-align: center; border-top: 1px solid #dee2e6;">
                <p style="margin: 0; font-size: 12px; color: #6c757d;">🤖 Automated deployment notification</p>
              </div>
            </div>
          </body>
          </html>
          EOF
          
          # Send email using jq for proper JSON escaping
          BODY_JSON=$(jq -Rs . < email.html)
          
          aws ses send-email \
            --from "tobi.akinlade.co@gmail.com" \
            --destination "ToAddresses=${{ secrets.EMAIL_RECIPIENTS }}" \
            --message "{\"Subject\":{\"Data\":\"${SUBJECT}\",\"Charset\":\"utf8\"},\"Body\":{\"Html\":{\"Data\":${BODY_JSON},\"Charset\":\"utf8\"}}}" \
            --region eu-west-2
          
          rm -f email.html
          echo "✅ Notification sent to team"

      - name: Summary
        run: |
          STATUS="${{ needs.deploy-production.result }}"
          VERSION="${{ github.ref_name }}"
          VERSION=$(echo "$VERSION" | sed 's|refs/tags/||')
          
          if [ "$STATUS" == "success" ]; then
            echo "### ✅ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
            echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
            echo "**Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔗 [View Application](https://app.tech-with-tobi.com)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
            echo "**Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ Review logs and consider rollback" >> $GITHUB_STEP_SUMMARY
          fi
